use ec::bjj::BabyJubJubParams;
use ec::Curve;
use ec::scalar_field::ScalarField;
use std::field::bn254::assert_lt;
use std::hash::poseidon::bn254::hash_2 as poseidon;

// The maximum depth of the Merkle Tree the inclusion proof will be coming from.
// This value can get updated by overwriting this line.
pub global MAX_DEPTH: u32 = 10;

// Generator point of Baby Jubjub curve.
// ref: https://github.com/noir-lang/noir-edwards/blob/main/src/test.nr#L6C8-L6C13
global BASE8: [Field; 2] = [
    5299619240641551281634865583518297030282874472190772894086521144482721001553,
    16950150798460657717958625567821834550301663161624707787222815936182638968203,
];

// This is a 251 bit value.
global L: Field = 2736030358979909402780800718157159386076813972158567259200215660948447373041;

// There are 3 main steps in the Noir program.
// - The first part generates the Semaphore identity by obtaining
//   the public key from the secret key and consequently hash the public key.
//   This resulting hash is the identityCommitment.
// - In the second part, it is verified that the identityCommitment is indeed
//   part of the merkle tree by verifying the merkle proof.
// - In the third part the nullifier is generated by hashing the hashedScope
//   with the secret key.

// There are 4 public values: the Merkle tree root, hashed scope, hashed message,
// and the nullifier. Whether the scope and message are actually hashed doesn't
// affect the circuit; the names just match how they're used in the Semaphore sdk.
//
// The message is tied to the circuit by adding it as a (public) input to the circuit.
fn main(
    secretKey: Field,
    indexes: Field, // a single field representing the index-bits for the merkle proof
    hashPath: [Field; MAX_DEPTH], // the Merkle Tree inclusion proof
    merkleProofLength: u32, // the number of non-zero elements in hashPath
    merkleTreeRoot: pub Field,
    hashScope: pub Field,
    hashedMessage: pub Field,
) -> pub Field {
    // Part 1
    // Ensure secret_key < l.
    assert_lt(secretKey, L);

    // Identity generation.
    // The public key is derived by multiplying the generator point with the secret key
    // interpreted as a scalar.
    let generator: Curve<BabyJubJubParams> = Curve { x: BASE8[0], y: BASE8[1] };
    // ScalarField is parameterised by the number of 4-bit slices it contains.
    // Since secret key is already know to be max 251 bits, there are 63 slices.
    let secretScalar: ScalarField<63> = ScalarField::from(secretKey);
    let pubkey = generator.mul(secretScalar);

    // Obtain the identity commitment by hashing the public key
    let identityCommitment = poseidon([pubkey.x, pubkey.y]);

    // Part 2
    // Verifies membership by repeatedly hashing with the elements from the merkle proof
    // Depending on the index bit, we swap the siblings for hashing or not.
    // Finally, it is checked the resulting root equals the expected one.
    // The index bits are bounded by 32, because the maximum Semaphore tree depth is 32.
    let index_bits: [u1; 32] = indexes.to_le_bits();
    let mut node = identityCommitment;
    for i in 0..MAX_DEPTH {
        if i < merkleProofLength {
            let sibling = hashPath[i];
            if index_bits[i] == 0 {
                node = poseidon([node, sibling]);
            } else {
                node = poseidon([sibling, node]);
            }
        }
    }
    assert(node == merkleTreeRoot);

    // Part 3
    // Obtain the nullifier by hashing the hashed scope and secret key.
    let nullifier = poseidon([hashScope, secretKey]);

    nullifier
}
